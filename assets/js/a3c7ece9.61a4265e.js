"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5244],{7579:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>h});var t=i(5893),r=i(1151),o=i(5305),s=i(1992),l=i(5871);const a={},d="LineWave",p={id:"components/line-wave",title:"LineWave",description:"<LiveProvider",source:"@site/docs/components/line-wave.mdx",sourceDirName:"components",slug:"/components/line-wave",permalink:"/react-loader-spinner/docs/components/line-wave",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/line-wave.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Infinity Spin",permalink:"/react-loader-spinner/docs/components/infinity-spin"},next:{title:"MagnifyingGlass",permalink:"/react-loader-spinner/docs/components/magnifying-glass"}},c={},h=[{value:"Props",id:"props",level:2},{value:"More Examples:",id:"more-examples",level:2}];function m(e){const n={h1:"h1",h2:"h2",hr:"hr",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"linewave",children:"LineWave"}),"\n",(0,t.jsxs)(s.nu,{code:'\n  render(<LineWave\n  visible={true}\n  height="100"\n  width="100"\n  color="#4fa94d"\n  ariaLabel="line-wave-loading"\n  wrapperStyle={{}}\n  wrapperClass=""\n  firstLineColor=""\n  middleLineColor=""\n  lastLineColor=""\n  />)\n',scope:{LineWave:l.LineWave},noInline:!0,children:[(0,t.jsx)(s.i5,{}),(0,t.jsx)("br",{}),(0,t.jsx)(s.uz,{}),(0,t.jsx)(s.IF,{})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,t.jsx)(o.Z,{properties:[{name:"height",type:"number | string",default:"100",description:"Height of the line wave."},{name:"width",type:"number | string",default:"100",description:"Width of the line wave."},{name:"color",type:"string",default:"#4fa94d",description:"Color of the line wave."},{name:"ariaLabel",type:"string",default:"line-wave",description:"ARIA label for the line wave."},{name:"wrapperStyle",type:"object",default:"{}",description:"Styles to be applied to the wrapper. It should be a valid CSS object. It can be used for custom styling. It will override the default style."},{name:"wrapperClass",type:"string",default:"undefined",description:"Class name for the wrapper element. It can be used for custom styling."},{name:"visible",type:"boolean",default:"true",description:"Whether the line wave is visible."},{name:"firstLineColor",type:"string",default:"undefined",description:"Color of the first line. If not provided, the color will be the same as the color."},{name:"middleLineColor",type:"string",default:"undefined",description:"Color of the middle line. If not provided, the color will be the same as the color."},{name:"lastLineColor",type:"string",default:"undefined",description:"Color of the last line. If not provided, the color will be the same as the color."}]}),"\n"," ","\n",(0,t.jsx)(n.h2,{id:"more-examples",children:"More Examples:"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(l.LineWave,{color:"red",firstLineColor:"green"}),"\n",(0,t.jsx)(l.LineWave,{color:"red",middleLineColor:"green",lastLineColor:"green"}),"\n",(0,t.jsx)(l.LineWave,{color:"red",firstLineColor:"blue",middleLineColor:"green",lastLineColor:"grey"})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);