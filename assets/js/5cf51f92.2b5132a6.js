"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9147],{2326:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>h,contentTitle:()=>p,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var i=t(5893),s=t(1151),o=t(5305),a=t(1992),l=t(5888),n=t(5871);const c={},p="Circles",d={id:"components/circles",title:"Circles",description:"<LiveProvider",source:"@site/docs/components/circles.mdx",sourceDirName:"components",slug:"/components/circles",permalink:"/react-loader-spinner/docs/components/circles",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/circles.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Circles With Bar",permalink:"/react-loader-spinner/docs/components/circles-with-bar"},next:{title:"Color Ring",permalink:"/react-loader-spinner/docs/components/color-ring"}},h={},u=[{value:"Props",id:"props",level:3}];function f(e){const r={h1:"h1",h3:"h3",hr:"hr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"circles",children:"Circles"}),"\n",(0,i.jsxs)(a.nu,{code:'\n  render(<Circles\n  height="80"\n  width="80"\n  color="#4fa94d"\n  ariaLabel="circles-loading"\n  wrapperStyle={{}}\n  wrapperClass=""\n  visible={true}\n  />)\n',scope:{Circles:n.Circles},noInline:!0,children:[(0,i.jsx)(a.i5,{}),(0,i.jsx)("br",{}),(0,i.jsx)(a.uz,{}),(0,i.jsx)(a.IF,{})]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"props",children:"Props"}),"\n",(0,i.jsx)(o.Z,{properties:[...(0,l.oD)("circles",["colors"])]})]})}function m(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},5888:(e,r,t)=>{t.d(r,{oD:()=>a});const i=e=>({height:`Specifies the height of the ${e} SVG. For additional customization, employ the wrapper className.`,width:`Specifies the width of the ${e} SVG. For further customization, utilize the wrapper className.`,colors:`Defines the colors of the ${e} SVG. Accepts multiple color objects. If a comprehensive list of colors is not provided, defaults will be applied. Refer to the example.`,color:`Sets the color of the ${e} SVG.`,ariaLabel:`Specifies the Aria label of the ${e}. This label will be applied to the aria-label attribute in the wrapper element.`,wrapperStyle:"Applies styles to the wrapper. It should be a valid CSS object and can be used for custom styling, overriding the default style.",wrapperClass:"Assigns a className to the wrapper for custom styling, overriding the default style.",visible:`Controls the visibility of the ${e}. If set to false, the ${e} will not be rendered.`,radius:`Determines the radius of the circle(s) in the ${e} component. For further customization, use the wrapper className.`}),s={height:"number | string",width:"number | string",colors:"Array<string>",color:"string: #hex-code",secondaryColor:"string: #hex-code",ariaLabel:"string",wrapperStyle:"object",wrapperClass:"string",visible:"boolean",radius:"number | string",strokeWidth:"number | string",strokeColor:"string"},o=e=>({height:"80",width:"80",color:"#4fa94d",secondaryColor:"#4fa94d",ariaLabel:`${e}-loading`,wrapperStyle:JSON.stringify({},null,2),wrapperClass:"undefined",visible:"true"}),a=function(e,r){return void 0===r&&(r=[]),[{name:"height",type:s.height,default:o(e).height,description:i(e).height},{name:"width",type:s.width,default:o(e).width,description:i(e).width},{name:"colors",type:s.colors,default:JSON.stringify(["#4fa94d","#4fa94d","#4fa94d"]),description:i(e).colors},{name:"ariaLabel",type:s.ariaLabel,default:o(e).ariaLabel,description:i(e).ariaLabel},{name:"wrapperStyle",type:s.wrapperStyle,default:o(e).wrapperStyle,description:i(e).wrapperStyle},{name:"wrapperClass",type:s.wrapperClass,default:o(e).wrapperClass,description:i(e).wrapperClass},{name:"visible",type:s.visible,default:o(e).visible,description:i(e).visible}].filter((e=>!r.includes(e.name)))}}}]);