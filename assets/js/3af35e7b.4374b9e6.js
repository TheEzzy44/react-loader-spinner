"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6582],{3745:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>u,toc:()=>p});var o=n(5893),s=n(1151),i=n(5305),r=n(1992),a=n(5871);const d={},l="Mutating Dots",u={id:"components/mutating-dots",title:"Mutating Dots",description:"<LiveProvider",source:"@site/docs/components/mutating-dots.mdx",sourceDirName:"components",slug:"/components/mutating-dots",permalink:"/react-loader-spinner/docs/components/mutating-dots",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/mutating-dots.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MagnifyingGlass",permalink:"/react-loader-spinner/docs/components/magnifying-glass"},next:{title:"Oval",permalink:"/react-loader-spinner/docs/components/oval"}},c={},p=[{value:"Props",id:"props",level:2}];function m(t){const e={h1:"h1",h2:"h2",hr:"hr",...(0,s.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"mutating-dots",children:"Mutating Dots"}),"\n",(0,o.jsxs)(r.nu,{code:'\n  render(<MutatingDots\n  visible={true}\n  height="100"\n  width="100"\n  color="#4fa94d"\n  secondaryColor="#4fa94d"\n  radius="12.5"\n  ariaLabel="mutating-dots-loading"\n  wrapperStyle={{}}\n  wrapperClass=""\n  />)\n',scope:{MutatingDots:a.MutatingDots},noInline:!0,children:[(0,o.jsx)(r.i5,{}),(0,o.jsx)("br",{}),(0,o.jsx)(r.uz,{}),(0,o.jsx)(r.IF,{})]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(i.Z,{properties:[{name:"height",type:"number | string",default:"100",description:"Height of the dots. Minimum height should be 100px"},{name:"width",type:"number | string",default:"100",description:"Width of the dots. Minimum width should be 100px"},{name:"color",type:"string",default:"#4fa94d",description:"Color of the dots"},{name:"secondaryColor",type:"string",default:"#4fa94d",description:"Secondary color for second dot. If not set, will use the color prop"},{name:"radius",type:"number | string",default:"12.5",description:"Radius of the dots"},{name:"ariaLabel",type:"string",default:"mutating-dots-loading",description:"Aria label of the mutating dots container. Will be used for the aria-label attribute of the container"},{name:"wrapperStyle",type:"object",default:"{}",description:"Styles to be applied to the wrapper. It should be a valid CSS object. It can be used for custom styling. It will override the default style."},{name:"wrapperClass",type:"string",default:"undefiend",description:"Class of the wrapper element. It can be used for custom styling. It will override the default style."},{name:"visible",type:"boolean",default:"true",description:"Visibility of the dots"}]})]})}function h(t={}){const{wrapper:e}={...(0,s.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(m,{...t})}):m(t)}}}]);